/*
 * main.S - #Project 1 Simple Bot Code
 * running on Nexys4 DDR FPGA target board
 *
 * Copyright Srivatsa Yogendra, 2017
 * 
 * Created By:		Srivatsa Yogendra
 * Modified By:     Michael Bourquin, Jean Shirimpaka
 * Last Modified:	12-Oct-2018
 *
 * Description:
 * Reads the switches on the FPGA board and writes 
 * the values to the LEDs
 * Reads the Buttons on the FPGA board and outputs a compass (3 Digit Display) based on relative turning position of Robot
 * Displays a robot motion in the 4th display based on button input
 *
 * Assumes the existance of an AHB-Lite peripheral for the 8 digit
 * 7-segment display on the Nexys4 DDR.  The peripheral has 4 memory
 * mapped I/O registers:
 *	PORT_SEVENSEG_EN - (8 bits) Individual enables for each digit. Set bit to 0 to enable digit
 *									Digit7 = bit[7], Digit6 = bit[6], Digit5 = bit[5], Digit4 = bit[4],
 *									Digit3 = bit[3], Digit2 = bit[2], Digit1 = bit[1], Digit0 = bit[0]
 *	PORT_SEVENSEG_HGH = (32 bits) Value of digit.  Each digit has the range of 31:0, top 3 bits ignored
 *									Digit7 = bits[31:24], Digit6 = bits[23:16],
 *									Digit5 = bits[15:8] , Digit4 = bits[7:0]
 *	PORT_SEVENSEG_LOW = (32 bits) Value of digit.  Each digit has the range of 31:0, top 3 bits ignored
 *									Digit3 = bits[31:24], Digit2 = bits[23:16],
 *									Digit1 = bits[15:8] , Digit0 = bits[7:0]
 *	PORT_SEVENSEG_DP - (8 bits) Individual decimal points for each digit. Set bit to 0 to turn on the decimal point
 *									DP7 = bit[7], DP6 = bit[6], DP5 = bit[5], DP4 = bit[4],
 *									DP3 = bit[3], DP2 = bit[2], DP1 = bit[1], DP0 = bit[0]
 */

PORT_SEVENSEG_EN 	= 0xbf700000		# (o) 7 Segment enable
PORT_SEVENSEG_HGH	= 0xbf700004		# (o) 7 Segment Higher Display
PORT_SEVENSEG_LOW	= 0xbf700008		# (o) 7 Segment Lower Display
PORT_SEVENSEG_DP	= 0xbf70000C		# (o) 7 segment Decimal Point Display
BUTTONS_ADDR 		= 0xbf800008        # (o) Input Buttons Address
LEDS_ADDR			= 0xbf800000        # (o) LEDS Address
X_ACC_ADDR			= 0xbf80001C		# (i)
Y_ACC_ADDR			= 0xbf800020		# (i)
Z_ACC_ADDR			= 0xbf800024        # (i)
BIT_12_MASK = 0x800
LED1_LIT = 0x1
LED1_OFF = 0x0
 
 
.globl main
main:
	li   $20, X_ACC_ADDR				# $20 = address of x_acc_data
	li   $21, Y_ACC_ADDR				# $21 = address of y_acc_data
	li   $22, Z_ACC_ADDR				# $22 = address of z_acc_data

li $t2, 200
lw $t1, 0($22)  # $t1=x_value

readIO:
lw $t4, 0($22) # $t4=reg_value			# load in inital x value of 0

IF1:
sub $t3, $t1, $t2 # $t3=x_value-200
slt $t5, $t4, $t3 # if reg_value<(x_value-200) then $t5=1
beq $t5, 1, SET_X

IF2:
add $t3, $t1, $t2 # x_value+200
slt $t5, $t4, $t3 # if reg_value<(x_value + 200) then $t5 = 1
beq $t5, 0, SET_X
j SKIP

SET_X:
add $t1, $t4, $0 # x_value = reg_value

SKIP:

li $t2, LEDS_ADDR
andi $t6, $t1, BIT_12_MASK
bne $t6, 0, NEGATIVE
j POSITIVE

NEGATIVE:
	addi $t3, $0, LED1_LIT
	j checkposEnd

POSITIVE:
	addi $t3, $0, LED1_OFF
	j checkposEnd

checkposEnd:
	sw $t3, 0($t2)
	j readIO
	nop # branch delay slot

